{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}


### Keys ###
let amountAssetIdKey = "amountAssetId"
let priceAssetIdKey  = "priceAssetId"
let feeRateKey       = "feeRate"
let forceStopKey     = "forceStop"


### Helper functions ###
func getAssetId(assetIdString: String) = {
    if (assetIdString == "WAVES") then unit else assetIdString.fromBase58String()
}
func getAssetBalance(assetId: ByteVector|Unit) = {
    match (assetId) {
        case id:ByteVector => this.assetBalance(id)
        case _ => this.wavesBalance().available
      }
}


### Globals ###
let amountAssetIdString = this.getStringValue(amountAssetIdKey)
let amountAssetId = getAssetId(amountAssetIdString)

let priceAssetIdString = this.getStringValue(priceAssetIdKey)
let priceAssetId = getAssetId(priceAssetIdString)

let SCALE8 = 1_0000_0000
let feeRate = this.getInteger(feeRateKey).valueOrElse(20_0000) # 0.2%

let isForceStopped = this.getBoolean(forceStopKey).valueOrElse(false)


### Functions ###
func calcPrice() = {
    fraction(getAssetBalance(priceAssetId), SCALE8, getAssetBalance(amountAssetId))
}

func calcRawSendAmount(asset1InitBalance: Int, asset2InitBalance: Int, asset2PaymentAmount: Int) = {
    let newAsset2Balance = asset2InitBalance + asset2PaymentAmount
    let newAsset1Balance = fraction(asset1InitBalance, asset2InitBalance, newAsset2Balance)
    let sendAmount = asset1InitBalance - newAsset1Balance

    sendAmount
}

func calcSendAmount(paymentAssetId: ByteVector|Unit, paymentAmount: Int, readonly: Boolean) = {
    let (asset1AssetId, asset2AssetId) = if (paymentAssetId == amountAssetId) 
        then (priceAssetId, amountAssetId)
        else (amountAssetId, priceAssetId)

    let asset1InitBalance = getAssetBalance(asset1AssetId)
    let asset2InitBalance = getAssetBalance(asset2AssetId) - (if (readonly) then 0 else paymentAmount)

    let rawSendAmount = calcRawSendAmount(asset1InitBalance, asset2InitBalance, paymentAmount)
    let feeAmount = fraction(rawSendAmount, feeRate, SCALE8)
    let sendAmount = rawSendAmount - feeAmount

    let userRealPrice = if (paymentAssetId == amountAssetId) 
        then fraction(sendAmount, SCALE8, paymentAmount)
        else fraction(paymentAmount, SCALE8, sendAmount)

    (sendAmount, feeAmount, asset1AssetId, userRealPrice)
}

func swapInternal(address: Address, i: Invocation) = {
    strict checks = [
        !isForceStopped || "contract is temporary stopped".throw(),
        i.payments.size() > 0 || "should be with 1 payment".throw(),
        [amountAssetId, priceAssetId].containsElement(i.payments[0].assetId) ||
            ["payment assetId should be", amountAssetIdString, "or", priceAssetIdString].makeString(" ").throw()
    ]
    let paymentAssetId = i.payments[0].assetId
    let paymentAmount = i.payments[0].amount

    let (sendAmount, feeAmount, sendAssetId, userRealPrice) = calcSendAmount(paymentAssetId, paymentAmount, false)
    let sendActions = if (feeAmount > 0) 
        then [ ScriptTransfer(address, sendAmount, sendAssetId) ]
        else "amount is too low".throw()

    (sendActions, (sendAmount, feeAmount, sendAssetId, userRealPrice))
}


### Readonly function
func calcSendAmountREADONLY(paymentAssetString: String, paymentAmount: Int) = {
    let (sendAmount, feeAmount, amAssetId, userRealPrice) = calcSendAmount(paymentAssetString.getAssetId(), paymentAmount, true)

    (sendAmount, userRealPrice, amAssetId)
}


### Callables ###
@Callable(i)
func swap() = {
    swapInternal(i.caller, i)
}

@Callable(i)
func swapNoLess(minAmount: Int) = {
    let (sendActions, tuple) = swapInternal(i.caller, i)
    let (sendAmount, feeAmount, sendAssetId, userRealPrice) = tuple

    if (sendAmount < minAmount) 
        then ["Price slipped. minAmount: ", minAmount.toString(), " swapAmount: ", sendAmount.toString()].makeString("").throw()
        else (sendActions, tuple)
}

@Callable(i)
func swapFor(address: String) = {
    swapInternal(address.addressFromStringValue(), i)
}

@Callable(i)
func forceStop(stopFlag: Boolean) = {
    strict checks = [
        i.caller == this || "permission denied".throw()
    ]

    [BooleanEntry(forceStopKey, stopFlag)]
}